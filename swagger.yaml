openapi: 3.0.0
info:
  contact:
    name: Alvarium Master Project
    url: 'https://cyber-threat-intelligence.com/'
    email: MPWS2022CD1@hpi.de
  description: Beekeeper API
  version: 1.0.0
  title: Beekeeper API
  license:
    name: TBD
    url: TBD
servers:
  - url: '{protocol}://{environment}.beekeeper.gitlab-k8s-1.thebeelab.net/v1'
    variables:
      protocol:
        default: https
        enum:
          - http
          - https
      environment:
        default: production # Production server
        enum:
          - production # Production server
          - staging # Staging server

  - url: 'http://localhost:3000/v1'
    description: 'Local testing'

tags:
  - name: endpoint
    description: Endpoints that receive connections and forward the traffic to the routers
  - name: endpointConfiguration
    description: Endpoint configurations holds a configuration that can be assigned to multiple endpoints
  - name: endpointForwardingRule
    description: Endpoint forwarding rules define which port of an endpoint should be forwarded to which router
  - name: router
    description: Routers that create honeypots and forward the traffic from the endpoints to the honeypots
  - name: honeypot
    description: Instances (e.g. container or physical hardware) that attackers interact with
  - name: user
    description: Users which can use the honeynet via the GUI
  - name: team
    description: Teams are a collection of users and group ressources in a hierarchy
  - name: experiment
    description: Experiments can be conducted within a team.
security:
  - UserAuthentication: []
paths:
  /health:
    get:
      summary: Check service health.
      description: Checks whether all services are healthy.
      security: []
      responses:
        '200':
          description: Service healthy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        '500':
          description: Service unhealthy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
  /endpoints:
    get:
      tags:
        - endpoint
      summary: Get All Endpoints
      description: Get all registered endpoints
      operationId: FindEndpoints
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllEndpointsResponse'
  /endpoints/register:
    post:
      tags:
        - endpoint
      summary: Register Endpoint
      description: |
        Given a valid registration token, this registers a new endpoint.
        The endpoint receives a new permanent authentication token using which it can authenticate
        to the API and e.g. receive its configuration.
      operationId: RegisterNewEndpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterEndpointRequest'
      responses:
        '201':
          description: Endpoint registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterEndpointResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/endpoints/{endpointId}':
    get:
      tags:
        - endpoint
      summary: Get Endpoint By ID
      description: Returns a single endpoint
      operationId: FindEndpoint
      parameters:
        - $ref: '#/components/parameters/EndpointIDParam'
      responses:
        '200':
          description: Endpoint found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoint'
        '400':
          description: Invalid ID supplied
        '404':
          $ref: '#/components/responses/NotFoundError'
    patch:
      tags:
        - endpoint
      summary: Update Endpoint
      description: Update an endpoint to change its configuration like exposed ports
      operationId: UpdateEndpoint
      parameters:
        - $ref: '#/components/parameters/EndpointIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditEndpointRequest'
      responses:
        '200':
          description: Update successfully
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - endpoint
      summary: Delete Endpoint
      description: Delete an endpoint
      operationId: DeleteEndpoint
      parameters:
        - $ref: '#/components/parameters/EndpointIDParam'
      responses:
        '204':
          description: Endpoint deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/endpoints/{endpointId}/transfer':
    post:
      tags:
        - endpoint
        - team
      summary: Transfer Endpoint To Team
      description: Transfers the ownership of the endpoint to a different team.
      operationId: TransferEndpoint
      parameters:
        - $ref: '#/components/parameters/EndpointIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndpointTransfer'
      responses:
        '204':
          description: Endpoint transferred successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/endpoints/{endpointId}/config':
    get:
      tags:
        - endpoint
      summary: Get Configuration Of Endpoint
      description: |
        Returns the configuration of an endpoint. This includes which traffic to forward and
        where to forward the traffic to.
      operationId: GetEndpointConfig
      security:
        - EndpointAuthentication: []
        - UserAuthentication: []
      parameters:
        - $ref: '#/components/parameters/EndpointIDParam'
      responses:
        '200':
          description: Endpoint configuration generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointConfiguration'
        '404':
          description: Endpoint with given id not found
  '/endpoints/{endpointId}/startup':
    post:
      tags:
        - endpoint
      summary: Start Endpoint
      description: |
        Starts an existing endpoint. This should be the first API call that an endpoint makes when
        starting its operation. It will tell the API where the endpoint is located (e.g. public IP).
      operationId: StartEndpoint
      security:
        - EndpointAuthentication: []
      parameters:
        - $ref: '#/components/parameters/EndpointIDParam'
      responses:
        '204':
          description: Endpoint startup successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Endpoint with given id not found
  '/endpoints/{endpointId}/logs':
    get:
      tags:
        - endpoint
      summary: Get Logs Of Endpoint
      description: Returns all the logs that an endpoint generated.
      operationId: GetEndpointLogs
      parameters:
        - $ref: '#/components/parameters/EndpointIDParam'
      responses:
        '200':
          description: Endpoint logs queried successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - endpoint
      summary: Add Logs To Endpoint
      description: Adds a new log entry for an endpoint. This can only be done by the endpoint itself.
      operationId: AddEndpointLog
      security:
        - EndpointAuthentication: []
      parameters:
        - $ref: '#/components/parameters/EndpointIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndpointLog'
      responses:
        '204':
          description: Endpoint log entry added successfully
        '404':
          $ref: '#/components/responses/NotFoundError'
  /endpoints/{endpointId}/stats:
    post:
      tags:
        - endpoint
      summary: Add Statistics Of Endpoint
      description: Used by the endpoint to regularly contact the beekeeper to inform it about liveliness status and other stats.
      operationId: AddEndpointStats
      security:
        - EndpointAuthentication: []
      parameters:
        - $ref: '#/components/parameters/EndpointIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndpointStats'
      responses:
        204:
          description: Stats added successfully
        404:
          $ref: '#/components/responses/NotFoundError'
  /endpoints/configurations:
    get:
      tags:
        - endpointConfiguration
      summary: Get All EndpointConfigurations
      description: Returns all available endpoint configurations. This is useful for the frontend to display all available endpoint configurations to the user which can then select one of them.
      operationId: FindAllEndpointConfigurations
      responses:
        '200':
          description: All endpoint configurations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllEndpointConfigurationsResponse'
        '400':
          $ref: '#/components/responses/UnauthorizedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/endpoints/configurations/{configurationId}':
    get:
      tags:
        - endpointConfiguration
      summary: Get EndpointConfiguration By ID
      description: Returns a specific endpoint configuration.
      operationId: FindEndpointConfiguration
      parameters:
        - $ref: '#/components/parameters/EndpointConfigurationIDParam'
      responses:
        '200':
          description: The requested endpoint configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointConfiguration'
        '400':
          $ref: '#/components/responses/UnauthorizedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    patch:
      tags:
        - endpointConfiguration
      summary: Edit EndpointConfiguration
      description: Modifies an existing endpoint configuration. As a side effect, modifying this configuration will modify the configuration of all endpoints connected with this specific configuration.
      operationId: EditEndpointConfiguration
      parameters:
        - $ref: '#/components/parameters/EndpointConfigurationIDParam'
      requestBody:
        description: Modified endpoint configuration
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditEndpointConfiguration'
      responses:
        '200':
          description: Endpoint configuration modified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointConfiguration'
        '400':
          $ref: '#/components/responses/UnauthorizedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - endpointConfiguration
      summary: Delete EndpointConfiguration
      description: Deletes an existing endpoint configuration. If an endpoint is assigned to this configuration, the configuration cannot be deleted.
      operationId: DeleteEndpointConfiguration
      parameters:
        - $ref: '#/components/parameters/EndpointConfigurationIDParam'
      responses:
        '204':
          description: Endpoint configuration deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/endpoints/configurations/{configurationId}/transfer':
    post:
      tags:
        - endpointConfiguration
        - team
      summary: Transfer EndpointConfiguration
      description: Transfers the ownership of the endpoint to a different team.
      operationId: TransferEndpointConfiguration
      parameters:
        - $ref: '#/components/parameters/EndpointConfigurationIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamTransfer'
      responses:
        '204':
          description: Configuration transferred successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /endpoints/{endpointId}/forwardingRules:
    get:
      tags:
        - endpointForwardingRule
      parameters:
        - $ref: '#/components/parameters/EndpointIDParam'
      summary: Get ForwardingRules Of Endpoint
      description: Get forwarding rules for the specified endpoint. These are informations for the endpoint regarding which incoming packets at a given port should be forwarded to which router.
      operationId: FindAllForwardingRulesByEndpoint
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllEndpointForwardingRulesResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - endpointForwardingRule
      parameters:
        - $ref: '#/components/parameters/EndpointIDParam'
      summary: Create New ForwardingRule
      description: Adds a new forwarding rule to the specified endpoint
      operationId: CreateEndpointForwardingRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEndpointForwardingRule'
      responses:
        '201':
          description: Forwarding Rule created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointForwardingRule'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /endpointForwardingRules:
    get:
      tags:
        - endpointForwardingRule
      summary: Get All ForwardingRules
      description: Get all created forwarding rules.
      operationId: FindAllEndpointForwardingRules
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/AllEndpointForwardingRulesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /endpointForwardingRules/{forwardingRuleId}:
    get:
      tags:
        - endpointForwardingRule
      summary: Get ForwardingRule By ID
      description: Get a specific forwarding rule of an endpoint as identified by its id.
      operationId: FindEndpointForwardingRuleByID
      parameters:
        - $ref: '#/components/parameters/EndpointForwardingRuleIDParam'
      responses:
        '200':
          description: Forwarding Rule found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointForwardingRule'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '405':
          $ref: '#/components/responses/InvalidInputError'
    patch:
      tags:
        - endpointForwardingRule
      summary: Edit ForwardingRule By ID
      description: Edits the endpoint forwarding rule with the given ID and the provided information.
      operationId: EditEndpointForwardingRule
      parameters:
        - $ref: '#/components/parameters/EndpointForwardingRuleIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditEndpointForwardingRule'
      responses:
        '200':
          description: Update successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointForwardingRule'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '405':
          $ref: '#/components/responses/InvalidInputError'
    delete:
      tags:
        - endpointForwardingRule
      summary: Delete ForwardingRule By ID
      description: Delete the endpoint forwarding rule with the specified ID
      operationId: DeleteEndpointForwardingRule
      parameters:
        - $ref: '#/components/parameters/EndpointForwardingRuleIDParam'
      responses:
        '204':
          description: Forwarding Rule deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '405':
          $ref: '#/components/responses/InvalidInputError'
  /routers:
    get:
      tags:
        - router
      summary: Get All Routers
      description: Returns all routers which are registered at the backend
      operationId: GetRouters
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllRoutersResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /routers/register:
    post:
      tags:
        - router
      summary: Register Router
      description: |
        Given a valid registration token, this registers a new router.
        The router receives a new permanent authentication token using which it can authenticate
        to the API and e.g. receive its configuration.
      operationId: RegisterRouter
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRouterRequest'
      responses:
        '201':
          description: Router registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterRouterResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/routers/{routerId}':
    get:
      tags:
        - router
      summary: Get Router By ID
      description: Returns a single router
      operationId: GetRouterById
      parameters:
        - $ref: '#/components/parameters/RouterIDParam'
      responses:
        '200':
          description: Router found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Router'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '405':
          $ref: '#/components/responses/InvalidInputError'
    patch:
      tags:
        - router
      summary: Edit Router By ID
      description: Updates the router with the given ID with the provided information to change its configuration.
      operationId: UpdateRouter
      parameters:
        - $ref: '#/components/parameters/RouterIDParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditRouter'
      responses:
        '200':
          description: Update successfully
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '405':
          description: Invalid input
    delete:
      tags:
        - router
      summary: Delete Router By ID
      description: Delete the router with the specified ID from the backend's database
      operationId: DeleteRouter
      parameters:
        - $ref: '#/components/parameters/RouterIDParam'
      responses:
        '204':
          description: router deleted successfully
        '400':
          description: invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '405':
          $ref: '#/components/responses/InvalidInputError'
  '/routers/{routerId}/transfer':
    post:
      tags:
        - router
        - team
      summary: Transfer Router
      description: Transfers the ownership of the router to a different team.
      operationId: TransferRouter
      parameters:
        - $ref: '#/components/parameters/RouterIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamTransfer'
      responses:
        '204':
          description: Configuration transferred successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/routers/{routerId}/startup':
    post:
      summary: Start Router
      description: Starts an existing router. This is the first API call of a previously registered router when starting its operation. It will tell the API where the route is located (e.g. public IP).
      tags:
        - router
      security:
        - RouterAuthentication: []
      parameters:
        - $ref: '#/components/parameters/RouterIDParam'
      responses:
        '204':
          description: Router startup successful
        '400':
          description: invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      operationId: postRouterStartupStatusById
  '/routers/{routerId}/config':
    post:
      summary: Get Configuration Of Router 
      description: Returns the configuartion of the router with the specified ID.
      tags:
        - router
      security:
        - RouterAuthentication: []
        - UserAuthentication: []
      parameters:
        - $ref: '#/components/parameters/RouterIDParam'
      responses:
        '200':
          description: Router configuration generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouterConfiguration'
        '400':
          description: invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      operationId: 'getRouterConfigById:'
  '/routers/{routerId}/logs':
    get:
      summary: Get Logs Of Router
      description: Returns all logs that a router generated.
      tags:
        - router
      parameters:
        - $ref: '#/components/parameters/RouterIDParam'
      responses:
        '200':
          description: Ok
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/AllRouterLogsResponse'
        '400':
          description: invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      operationId: getRouterLogsById
    post:
      summary: Add Logs To Router
      description: API-Endpoint to post to when a router shares logs
      operationId: postRouterLogsById
      tags:
        - router
      security:
        - RouterAuthentication: []
      parameters:
        - $ref: '#/components/parameters/RouterIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouterLog'
      responses:
        '204':
          description: Router log entry added successfully
        '400':
          description: invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/routers/{routerId}/metrics':
    get:
      summary: Get Logs Of Router
      description: Returns all logs that a router generated.
      tags:
        - router
      parameters:
        - $ref: '#/components/parameters/RouterIDParam'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllRouterMetricsResponse'
        '400':
          description: invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      operationId: getRouterMetricsById
    post:
      summary: Add Metrics Of Router
      description: API-Endpoint to post to when a router shares metrics
      tags:
        - router
      security:
        - RouterAuthentication: []
      parameters:
        - $ref: '#/components/parameters/RouterIDParam'
      responses:
        '204':
          description: metrics submitted successfully
        '400':
          description: invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      operationId: postRouterMetricsById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouterMetrics'
  /routers/{routerId}/honeypots:
    get:
      tags:
        - honeypot
      parameters:
        - $ref: '#/components/parameters/RouterIDParam'
      summary: Get Honeypots Of Router
      description: Get all honeypots attached to the router. These are honeypots that the router can talk to and possibly also manages (e.g. containers).
      operationId: FindAllHoneypotsByRouter
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllHoneypotsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - honeypot
      parameters:
        - $ref: '#/components/parameters/RouterIDParam'
      summary: Add New Honeypot Of Router
      description: Adds a new honeypot to the specified router
      operationId: CreateHoneypot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewHoneypot'
      responses:
        '201':
          description: Honeypot created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Honeypot'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /honeypots:
    get:
      tags:
        - honeypot
      summary: Get All Honeypots
      description: Get all registered honeypots. This might be interesting for administrators to monitor all available honeypots.
      operationId: FindAllHoneypots
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllHoneypotsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /honeypots/{honeypotId}:
    get:
      tags:
        - honeypot
      summary: Get Honeypot By ID
      description: Get a specific honeypot of a router as identified by its id.
      operationId: FindHoneypotById
      parameters:
        - $ref: '#/components/parameters/HoneypotIDParam'
      responses:
        '200':
          description: Honeypot found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Honeypot'
                  - type: object
                    properties:
                      permissions:
                        $ref: '#/components/schemas/UserObjectPermissions'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '405':
          $ref: '#/components/responses/InvalidInputError'
    patch:
      tags:
        - honeypot
      summary: Edit Honeypot By ID
      description: Edits the honeypot with the given ID and the provided information.
      operationId: EditHoneypot
      parameters:
        - $ref: '#/components/parameters/HoneypotIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditHoneypot'
      responses:
        '200':
          description: Update successfully
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '405':
          description: Invalid input
    delete:
      tags:
        - honeypot
      summary: Delete Honeypot By ID
      description: Delete the honeypot with the specified ID
      operationId: DeleteHoneypot
      parameters:
        - $ref: '#/components/parameters/HoneypotIDParam'
      responses:
        '204':
          description: Honeypot deleted successfully
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '405':
          $ref: '#/components/responses/InvalidInputError'
  /users:
    get:
      tags:
        - user
      summary: Get All Users
      description: Gets all registered users to display them for the administrator in the GUI
      operationId: ShowAllRegisteredUsers
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsersResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/users/{userId}':
    get:
      summary: Get User By ID
      description: Returns information about a specific user
      operationId: ShowUserInformationById
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/UserIDParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalUser'
    patch:
      tags:
        - user
      summary: Edit User By ID
      description: Update information of a specific user
      operationId: UpdateUser
      parameters:
        - $ref: '#/components/parameters/UserIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUser'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalUser'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '405':
          $ref: '#/components/responses/InvalidInputError'
    delete:
      tags:
        - user
      summary: Delete User By ID
      description: Delete a user
      operationId: DeleteUser
      parameters:
        - name: userId
          in: path
          description: user id to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /teams:
    get:
      tags:
        - team
      summary: Get All Teams
      description: Gets all teams
      operationId: FindAllTeams
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllTeamsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - team
      summary: Create Root Team 
      description: Creates a new team. The authenticated user will be the owner.
      operationId: CreateTeam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTeam'
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/teams/{teamId}':
    get:
      summary: Get Team By ID
      description: Returns information about a specific team
      operationId: FindTeamById
      tags:
        - team
      parameters:
        - $ref: '#/components/parameters/TeamIDParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    patch:
      tags:
        - team
      summary: Edit Team By ID
      description: Update information of a specific team
      operationId: EditTeam
      parameters:
        - $ref: '#/components/parameters/TeamIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditTeam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - team
      summary: Delete Team By ID
      description: Delete a team
      operationId: DeleteTeam
      parameters:
        - $ref: '#/components/parameters/TeamIDParam'
      responses:
        '204':
          description: Successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/teams/{teamId}/teams':
    post:
      tags:
        - team
      summary: Create Sub Team
      description: Creates a new sub-team. The authenticated user will be the owner.
      operationId: CreateSubTeam
      parameters:
        - $ref: '#/components/parameters/TeamIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSubteam'
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/teams/{teamId}/users':
    get:
      summary: Get Users By Team
      description: Returns all users that are in the team
      operationId: FindUsersByTeamId
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/TeamIDParam'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTeamsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/teams/{teamId}/users/{userId}':
    put:
      summary: Add User To Team
      operationId: AddUserToTeam
      tags:
        - team
      parameters:
        - $ref: '#/components/parameters/TeamIDParam'
        - $ref: '#/components/parameters/UserIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTeamAssignment'
      responses:
        '204':
          description: Ok
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Remove User From Team
      operationId: RemoveUserFromTeam
      tags:
        - team
      parameters:
        - $ref: '#/components/parameters/TeamIDParam'
        - $ref: '#/components/parameters/UserIDParam'
      responses:
        '204':
          description: Ok
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/teams/{teamId}/endpoints':
    get:
      tags:
        - endpoint
      summary: Get Endpoints By Team
      description: Returns all endpoints of that team. Does not include subteams.
      operationId: FindEndpointsByTeam
      parameters:
        - $ref: '#/components/parameters/TeamIDParam'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllEndpointsResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - endpoint
      summary: Add Endpoint To Team
      description: Create a new endpoint which can then register itself with the server. The endpoint is associated to the team.
      operationId: CreateEndpoint
      parameters:
        - $ref: '#/components/parameters/TeamIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEndpointRequest'
      responses:
        '201':
          description: Endpoint created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewEndpointResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/teams/{teamId}/endpoints/configurations':
    get:
      tags:
        - endpointConfiguration
      summary: Get EndpointConfigurations By Team
      description: Returns all available endpoint configurations. This is useful for the frontend to display all available endpoint configurations to the user which can then select one of them.
      operationId: FindAllEndpointConfigurationsByTeam
      parameters:
        - $ref: '#/components/parameters/TeamIDParam'
      responses:
        '200':
          description: All endpoint configurations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllTeamEndpointConfigurationsResponse'
        '400':
          $ref: '#/components/responses/UnauthorizedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - endpointConfiguration
      summary: Add EndpointConfiguration To Team
      description: Create a new endpoint configuration which can then be used for multiple endpoints. An endpoint configuration must exist before creating an endpoint, as an endpoint will be assigned a configuration when it is created.
      operationId: CreateEndpointConfiguration
      parameters:
        - $ref: '#/components/parameters/TeamIDParam'
      requestBody:
        description: Endpoint configuration to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEndpointConfiguration'
      responses:
        '201':
          description: Endpoint configuration created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointConfiguration'
        '400':
          $ref: '#/components/responses/UnauthorizedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/teams/{teamId}/routers':
    get:
      tags:
        - router
      summary: Get Routers By Team
      description: Returns all routers of the team
      operationId: GetRoutersByTeam
      parameters:
        - $ref: '#/components/parameters/TeamIDParam'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllRoutersResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - router
      summary: Add Router To Team
      description: Create a new router in the team which can then register itself with the server
      operationId: CreateRouter
      parameters:
        - $ref: '#/components/parameters/TeamIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRouter'
      responses:
        '201':
          description: Router created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewRouterResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/teams/{teamId}/experiments':
    get:
      tags:
        - team
      summary: Get Experiments By Team
      operationId: GetExperimentsByTeamId
      parameters:
      - $ref: '#/components/parameters/TeamIDParam'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/AllExperimentsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - team
      summary: Add Experiment To Team
      operationId: CreateExperimentByTeamId
      parameters:
        - $ref: '#/components/parameters/TeamIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExperiment'
      responses:
        '201':
          description: Experiment Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
        '400':
          $ref: '#/components/responses/BadRequestError'  
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/experiments/{experimentId}':
    get:
      tags:
      - experiment
      summary: Get Experiment By ID
      operationId: GetExperimentById
      parameters:
        - $ref: '#/components/parameters/ExperimentIDParam'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    patch:
      tags:
        - experiment
      summary: Edit Experiment By ID
      operationId: EditExperiment
      parameters:
        - $ref: '#/components/parameters/ExperimentIDParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditExperiment'
      responses:
        '201':
          description: Experiment Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
        '400':
          $ref: '#/components/responses/BadRequestError'  
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - experiment
      summary: Delete Experiment By ID
      operationId: DeleteExperiment
      parameters:
        - $ref: '#/components/parameters/ExperimentIDParam'
      responses:
        '204':
          description: Ok
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
components:
  securitySchemes:
    EndpointAuthentication:
      type: apiKey
      in: header
      name: X-API-KEY
      description: The authentication by endpoints using the authentication token received on registration.
    RouterAuthentication:
      type: apiKey
      in: header
      name: X-API-KEY
      description: The authentication by routers using the authentication token received on registration.
    UserAuthentication:
      type: http
      scheme: bearer
      description: The authentication by a user using the `auth_token` received from a request to our OIDC provider.
  parameters:
    EndpointIDParam:
      name: endpointId
      in: path
      description: ID of the endpoint to operate on
      required: true
      schema:
        $ref: '#/components/schemas/EndpointID'
    RouterIDParam:
      name: routerId
      in: path
      description: ID of the router to operate on
      required: true
      schema:
        $ref: '#/components/schemas/RouterID'
    UserIDParam:
      name: userId
      in: path
      description: ID of the user to operate on
      required: true
      schema:
        $ref: '#/components/schemas/UserID'
    EndpointConfigurationIDParam:
      name: configurationId
      in: path
      description: ID of the configuration to operate on
      required: true
      schema:
        $ref: '#/components/schemas/EndpointConfigurationID'
    HoneypotIDParam:
      name: honeypotId
      in: path
      description: ID of the honeypot to operate on
      required: true
      schema:
        $ref: '#/components/schemas/HoneypotID'
    EndpointForwardingRuleIDParam:
      name: forwardingRuleId
      in: path
      description: ID of the endpoint forwarding rule to operate on
      required: true
      schema:
        $ref: '#/components/schemas/EndpointForwardingRuleID'
    TeamIDParam:
      name: teamId
      in: path
      description: ID of the team to operate on
      required: true
      schema:
        $ref: '#/components/schemas/TeamID'
    ExperimentIDParam:
      name: experimentId
      in: path
      description: ID of the endpoint to operate on
      required: true
      schema:
        $ref: '#/components/schemas/ExperimentID'
  schemas:
    EndpointID:
      type: string
      format: uuid
      description: The unique identifier of an endpoint
    EndpointConfigurationID:
      type: string
      format: uuid
      description: The unique identifier of an endpoint configuration
    EndpointIngressDenyRuleID:
      type: string
      format: uuid
      description: The unique identifier of an endpoint configuration
      x-oapi-codegen-extra-tags:
        binding: required
    EndpointForwardingRuleID:
      type: string
      format: uuid
      description: The unique identifier of an endpoint configuration
    BasicEndpoint:
      type: object
      description: An object describing the basic properties of an endpoint
      properties:
        name:
          type: string
          example: AWS Endpoint
          x-oapi-codegen-extra-tags:
            binding: required
        description:
          type: string
          example: Endpoint hosted on AWS
    EditEndpoint:
      type: object
      description: The object to use when modifying an Endpoint object
      allOf:
        - $ref: '#/components/schemas/BasicEndpoint'
        - type: object
          properties:
            configurationId:
              $ref: '#/components/schemas/EndpointConfigurationID'
    NewEndpoint:
      type: object
      description: The object to use when creating a new Endpoint object
      allOf:
        - $ref: '#/components/schemas/EditEndpoint'
        - type: object
          required:
          - name
          - configurationId
    SimpleEndpoint:
      type: object
      description: Endpoint that does not contain any relations.
      properties:
        id:
          $ref: '#/components/schemas/EndpointID'
        isRegistered:
          type: boolean
          description: Shows whether the endpoint has been registered already.
          x-oapi-codegen-extra-tags:
            binding: required
        name:
          type: string
          example: AWS Endpoint
          x-oapi-codegen-extra-tags:
            binding: required
        description:
          type: string
          example: Endpoint hosted on AWS
        publicIP:
          description: The public IP of the endpoint, using which it receives traffic from attackers.
          type: string
          format: ip
          example: 133.7.42.42
          x-oapi-codegen-extra-tags:
            binding: required
        alive:
          type: boolean
          description: Whether the endpoint is currently alive, as measured by its hearbeat.
          x-oapi-codegen-extra-tags:
            binding: required
        lastHeartbeat:
          type: string
          format: date-time
          description: Time of the last received heartbeat.
          x-oapi-codegen-extra-tags:
            binding: required
      required:
        - id
        - name
        - isRegistered
        - publicIP
        - alive
        - lastHeartbeat
    Endpoint:
      type: object
      description: A complete endpoint. Team is only unset, if it can be inferred otherwise, e.g. because /teams/id/endpoints was requested.
      allOf:
        - $ref: '#/components/schemas/SimpleEndpoint'
        - type: object
          required:
            - id
            - name
            - isRegistered
            - publicIP
            - configuration
          properties:
            configuration:
              $ref: '#/components/schemas/EndpointConfiguration'
            team:
              $ref: '#/components/schemas/SimpleTeam'
            permissions:
              $ref: '#/components/schemas/UserObjectPermissions'
    EndpointApiKey:
      type: string
      description: A permanent authentication token that the endpoint uses to authenticate against the API.
    RouterApiKey:
      type: string
      description: A permanent authentication token that the endpoint uses to authenticate against the API.
    NewEndpointRequest:
      allOf:
        - $ref: '#/components/schemas/NewEndpoint'
    NewEndpointResponse:
      type: object
      required:
        - endpoint
        - registrationToken
      properties:
        endpoint:
          $ref: '#/components/schemas/Endpoint'
        registrationToken:
          $ref: '#/components/schemas/EndpointRegistrationToken'
    EditEndpointRequest:
      allOf:
        - $ref: '#/components/schemas/EditEndpoint'
    RegisterEndpointRequest:
      type: object
      properties:
        registrationToken:
          $ref: '#/components/schemas/EndpointRegistrationToken'
      required:
        - registrationToken
    RegisterRouterRequest:
      type: object
      properties:
        registrationToken:
          $ref: '#/components/schemas/RouterRegistrationToken'
      required:
        - registrationToken
    RegisterEndpointResponse:
      type: object
      required:
        - id
        - apiKey
      properties:
        id:
          $ref: '#/components/schemas/EndpointID'
        apiKey:
          $ref: '#/components/schemas/EndpointApiKey'
    RegisterRouterResponse:
      type: object
      required:
        - id
        - apiKey
      properties:
        id:
          $ref: '#/components/schemas/RouterID'
        apiKey:
          $ref: '#/components/schemas/RouterApiKey'
    AllEndpointsResponse:
      type: object
      required:
        - endpoints
        - count
      properties:
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/Endpoint'
        count:
          type: integer
        permissions:
          $ref: '#/components/schemas/UserObjectPermissions'
    AllEndpointConfigurationsResponse:
      type: object
      required:
        - configurations
        - count
      properties:
        configurations:
          type: array
          items:
            $ref: '#/components/schemas/EndpointConfiguration'
        count:
            type: integer
            description: The amount of configurations returned
        permissions:
          $ref: '#/components/schemas/UserObjectPermissions'
    AllTeamEndpointConfigurationsResponse:
      allOf:
        - $ref: '#/components/schemas/AllEndpointConfigurationsResponse'
        - type: object
          required:
            - permissions
          properties:
            permissions:
              $ref: '#/components/schemas/UserObjectPermissions'
    AllUsersResponse:
      type: object
      required:
        - users
        - count
      properties:
        users:
          type: array
          items:
          # Change here for GlobalUser once roles are merged
            $ref: '#/components/schemas/User'
        count:
          type: integer
    AllRoutersResponse:
      type: object
      required:
        - routers
        - count
      properties:
        routers:
          type: array
          items:
            $ref: '#/components/schemas/Router'
        count:
          type: integer
        permissions:
          $ref: '#/components/schemas/UserObjectPermissions'
    AllRouterLogsResponse:
      type: object
      properties:
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/RouterLog'
        count:
          type: integer
      required:
        - endpoints
        - count
    AllRouterMetricsResponse:
      type: object
      properties:
        endpoints:
          type: array
          items:
             $ref: '#/components/schemas/RouterMetrics'
        count:
          type: integer
      required:
        - endpoints
        - count
    AllEndpointForwardingRulesResponse:
      type: object
      required:
        - forwardingRules
        - count
      properties:
        forwardingRules:
          type: array
          items:
            $ref: '#/components/schemas/EndpointForwardingRule'
        count:
          type: integer
    AllTeamsResponse:
      type: object
      required:
        - teams
        - count
      properties:
        teams:
          type: array
          items:
            $ref: '#/components/schemas/Team'
        count:
          type: integer
    AllHoneypotsResponse:
      type: object
      required:
        - honeypots
        - count
      properties:
        honeypots:
          type: array
          items:
            $ref: '#/components/schemas/Honeypot'
        count:
          type: integer
        permissions:
          $ref: '#/components/schemas/UserObjectPermissions'
    UserTeamsResponse:
      type: object
      required:
        - users
        - count
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/TeamUser'
        count:
          type: integer
        permissions:
          $ref: '#/components/schemas/UserObjectPermissions'
    EndpointRegistrationToken:
      type: string
      description: A single-use token that is handed to the endpoint for registration.
      x-oapi-codegen-extra-tags:
        binding: required
    EditEndpointConfiguration:
      type: object
      description: The object to use when modifying an EndpointConfiguration object
      properties:
        name:
          type: string
          example: Deny all webserver ports
        ingressDenyRules:
          description: Rules that the endpoint should follow when forwarding incoming traffic.
          type: array
          items:
            $ref: '#/components/schemas/EndpointIngressDenyRule'
    NewEndpointConfiguration:
      type: object
      description: The object to use when creating a new EndpointConfiguration object
      required:
        - name
        - ingressDenyRules
      allOf:
        - $ref: '#/components/schemas/EditEndpointConfiguration'
    EndpointConfiguration:
      description: The configuration of an endpoint. Team is only unset, if it can be inferred otherwise, e.g. because /teams/id/endpointConfigurations was requested.
      allOf:
        - type: object
          required:
            - id
            - name
          properties:
            id:
              $ref: '#/components/schemas/EndpointConfigurationID'
            name:
              type: string
              x-oapi-codegen-extra-tags:
                binding: required
            team:
              $ref: '#/components/schemas/SimpleTeam'
            permissions:
              $ref: '#/components/schemas/UserObjectPermissions'
        - $ref: '#/components/schemas/NewEndpointConfiguration'
    PacketMatcher:
      type: object
      description: A rule to match a packet and make processing decisions based on that.
      required:
        - protocol
        - port
      properties:
        protocol:
          description: The protocol to filter on.
          type: string
          enum:
            - tcp
            - udp
          x-oapi-codegen-extra-tags:
            binding: required
        port:
          type: integer
          description: The port to deny traffic to.
          example: 80
          x-oapi-codegen-extra-tags:
            binding: required
    EndpointIngressDenyRule:
      type: object
      description: A rule that specifies what ingress traffic to **NOT** forward to the beehive.
      required:
        - protocol
        - port
      allOf:
        - $ref: '#/components/schemas/PacketMatcher'
    EditEndpointForwardingRule:
      type: object
      description: The object to use when editing a new endpoint forwarding rule.
      required:
        - endpointMatcher
        - routerMatcher
        - honeypotType
      properties:
        endpointMatcher:
          description: Packet matcher that the endpoint uses to filter the packets that apply to this forwarding rule.
          allOf:
            - $ref: '#/components/schemas/PacketMatcher'
        routerMatcher:
          description: |
            Packet matcher that the router uses to filter the packets that apply to this forwarding rule.
            For now, the protocol here must match the protocol in the endpointMatcher, as we aren't able to switch protocols in between.
            If they do not match, the behavior is undefined.
          allOf:
            - $ref: '#/components/schemas/PacketMatcher'
        honeypotType:
          type: string
          description: Type of the honeypot the traffic should be routed to
          x-oapi-codegen-extra-tags:
            binding: required
    NewEndpointForwardingRule:
      type: object
      description: The object to use when creating a new endpoint forwarding rule.
      required:
        - endpointMatcher
        - routerMatcher
        - honeypotType
      allOf:
        - $ref: '#/components/schemas/EditEndpointForwardingRule'
    EndpointForwardingRule:
      type: object
      description: |
        An endpoint forwarding rule.
        When the `honeypot` property is set, a decision has been made to route traffic to a specific honeypot on a specific router.
      allOf:
        - type: object
          required:
            - id
            - endpoint
            - endpointMatcher
            - routerMatcher
            - honeypotType
          properties:
            id:
              $ref: '#/components/schemas/EndpointForwardingRuleID'
            endpoint:
              $ref: '#/components/schemas/SimpleEndpoint'
            honeypot:
              $ref: '#/components/schemas/Honeypot'
        - $ref: '#/components/schemas/NewEndpointForwardingRule'
    EndpointLog:
      type: object
      description: A log entry of an endpoint.
      properties:
        entry:
          type: string
          description: The log entry
          example: Received new connection from 1.1.1.1
    EndpointHeartbeat:
        type: string
        description: ISO8601 date and time
        example: '1970-01-20T:14:30:02.150Z'
    EndpointStats:
      type: object
      description: Heartbeat information from an endpoint
      properties:
        timestamp:
          type: string
          description: ISO8601 date and time
          example: '1970-01-20T:14:30:02.150Z'
    EditRouter:
      type: object
      description: Object to use when editing a router.
      properties:
        name:
          type: string
          example: Router H-1
          x-oapi-codegen-extra-tags:
            binding: required
        description:
          type: string
          example: The router hosted on the server in H-1.
    NewRouter:
      type: object
      description: Object to use when creating a router.
      allOf:
        - $ref: '#/components/schemas/EditRouter'
        - type: object
          required:
          - name
    Router:
      type: object
      description: A router, also known as Beehive. Team is only unset, if it can be inferred otherwise, e.g. because /teams/id/routers was requested.
      required:
        - name
      allOf:
        - type: object
          required:
            - id
            - isRegistered
          properties:
            id:
              $ref: '#/components/schemas/RouterID'
            isRegistered:
              type: boolean
              description: Shows whether the endpoint has been registered already.
              x-oapi-codegen-extra-tags:
                binding: required
            team:
              $ref: '#/components/schemas/SimpleTeam'
            permissions:
              $ref: '#/components/schemas/UserObjectPermissions'
        - $ref: '#/components/schemas/NewRouter'
    RouterID:
      type: string
      format: uuid
      description: The unique identifier of a router
    RouterRegistrationToken:
      type: string
      description: A single-use token that is handed to the router for registration.
      x-oapi-codegen-extra-tags:
        binding: required
    RouterConfiguration:
      type: object
      description: The configuration of a router.
      required:
        - router
        - forwardings
      properties:
        router:
          $ref: '#/components/schemas/Router'
        forwardings:
          type: array
          items:
            description: A forwarding rule that dictates to which honeypot the traffic received from an endpoint should be routed to.
            required:
              - endpoint
              - honeypot
              - matcher
            allOf:
              - $ref: '#/components/schemas/EndpointForwardingRule'
    RouterLog:
      type: object
      description: A log entry of a router.
      properties:
        entry:
          type: string
          description: The log entry
          example: Received new connection from Endpoint X.X.X.X
    RouterMetrics:
      type: object
      description: A metrics entry entry of a router.
      properties:
        entry:
          type: string
          description: The metrics entry
          example: Received new connection from Endpoint X.X.X.X
    NewRouterResponse:
      type: object
      required:
        - router
        - registrationToken
      properties:
        router:
          $ref: '#/components/schemas/Router'
        registrationToken:
          $ref: '#/components/schemas/RouterRegistrationToken'
    HoneypotID:
      type: string
      format: uuid
      description: The unique identifier of a honeypot.
    EditHoneypot:
      type: object
      description: The object to use when modifying a honeypot.
      properties:
        name:
          type: string
          description: |
            A name that describes the honeypot.
            This is useful for static honeypots to include some identifier like the specific model number.
            When a hardware honeypot is removed, e.g. because it broke, this can then be used to identify the honeypot in the system and delete it properly.
            This is optional. If it isn't set on creation, a proper default value will be set (e.g. type/id)
          example: Samsung Smart TV No. 1
        ip:
          type: string
          format: ip
          description: The ip under which the beehive can reach the honeypot.
          example: 10.11.12.13
          x-oapi-codegen-extra-tags:
            binding: required
        type:
          type: string
          description: The type identifying the honeypot. Could be a Docker image (e.g. `nginx:latest`) or something describing a hardware appliance (e.g. `Samsung Smart TV`).
          example: nginx:latest
          x-oapi-codegen-extra-tags:
            binding: required
    NewHoneypot:
      type: object
      description: The object to use when creating a new honeypot.
      allOf:
        - $ref: '#/components/schemas/EditHoneypot'
        - type: object
          required:
          - ip
          - type
          - dynamic
          properties:
            dynamic:
              type: boolean
              description: Specifies whether this honeypot was created dynamically (e.g. a container created by the router) or statically (e.g. a Smart TV via the frontend)
              x-oapi-codegen-extra-tags:
                binding: required
    Honeypot:
      type: object
      description: |
        A honeypot (e.g. a single running Docker container).
        When `endpointForwardingRule` is set, the honeypot is assigned to the corresponding endpoint.
      allOf:
        - type: object
          required:
            - id
            - name
            - ip
            - type
            - dynamic
            - router
          properties:
            id:
              $ref: '#/components/schemas/HoneypotID'
            router:
              $ref: '#/components/schemas/Router'
            endpointForwardingRule:
              $ref: '#/components/schemas/EndpointForwardingRule'
        - $ref: '#/components/schemas/NewHoneypot'
    UserID:
      type: string
      format: uuid
      description: The unique identifier of a user
    UserGroup:
      type: string
      description: the usergroup a given user is a member of
      example: 'admin, researcher'
    UserName:
      type: string
      description: The name of a user
      example: 'Jane Doe'
    User:
      type: object
      description: A user in our system.
      allOf:
        - type: object
          required:
            - id
            - name
          properties:
            id:
              $ref: '#/components/schemas/UserID'
            name:
              $ref: '#/components/schemas/UserName'
    TeamUser:
      type: object
      description: A user that is part of a team.
      required:
        - id
        - name
        - role
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            role:
              $ref: '#/components/schemas/UserTeamRole'
    GlobalUser:
      type: object
      description: A user that is returned as part of a global query.
      required:
        - id
        - name
        - role
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            role:
              $ref: '#/components/schemas/GlobalUserRole'
    EditUser:
      type: object
      description: Object to update a user.
      properties:
        role:
          $ref: '#/components/schemas/GlobalUserRole'
    TeamID:
      type: string
      format: uuid
      description: The unique identifier of a team
      x-oapi-codegen-extra-tags:
        binding: required
    EditTeam:
      type: object
      description: Object to use when editing a team
      properties:
        name:
          type: string
          description: The name of a team
          example: 'Alvarium'
          x-oapi-codegen-extra-tags:
            binding: required
    NewTeam:
      type: object
      description: Object to use when creating a team
      allOf:
        - $ref: '#/components/schemas/EditTeam'
        - type: object
          required:
          - name
    SimpleTeam:
      type: object
      description: The basic properties of a team without relations
        - name
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              $ref: '#/components/schemas/TeamID'
        - $ref: '#/components/schemas/NewTeam'
    NewSubteam:
      type: object
      description: Object to use when creating a team
      allOf:
        - $ref: '#/components/schemas/NewTeam'
    Team:
      type: object
      allOf:
        - $ref: '#/components/schemas/SimpleTeam'
        - type: object
          required:
            - id
            - name
            - role
          properties:
            parent:
              $ref: '#/components/schemas/TeamID'
            subteams:
              type: array
              description: Direct subteams of a team. Does not include subsubteams etc.
              items:
                $ref: '#/components/schemas/SimpleTeam'
            role:
              $ref: '#/components/schemas/UserTeamRole'
            permissions:
              $ref: '#/components/schemas/UserObjectPermissions'
    TeamTransfer:
      type: object
      description: Object to use when transferring a resource from one team to another.
      required:
        - newTeamId
      properties:
        newTeamId:
          $ref: '#/components/schemas/TeamID'
    EndpointTransfer:
      type: object
      description: Object to use when transferring an endpoint from one team to another.
      allOf:
        - $ref: '#/components/schemas/TeamTransfer'
        - type: object
          required:
            - newConfigurationId
          properties:
            newConfigurationId:
              $ref: '#/components/schemas/EndpointConfigurationID'
    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    Health:
      type: object
      properties:
        message:
          description: The message of the API.
          example: 🧑‍🌾 🐝 🐝 🐝
      required:
        - message
    GlobalUserRole:
      type: string
      description: Global role of the user in the Alvarium system.
      enum:
        - user
        - beehiveOperator
        - admin
    UserTeamRole:
      type: string
      description: Role to assign to the user in the team.
      enum:
        - guest
        - researcher
        - maintainer
        - owner
    UserTeamAssignment:
      type: object
      description: Assigning a user to a team
      required:
        - role
      properties:
        role:
          $ref: '#/components/schemas/UserTeamRole'
          x-oapi-codegen-extra-tags:
            binding: required
    UserObjectPermission:
      type: string
      description: Permission what a user can do on an object.
      enum:
        - create
        - read
        - write
        - admin
    UserObjectPermissions:
      type: array
      description: Permissions what a user can do on an object.
      items:
        $ref: '#/components/schemas/UserObjectPermission'
    ExperimentID:
      type: string
      format: uuid
      description: The unique identifier of an endpoint
    ExperimentStatus:
      type: string
      description: indicates whether an experiment has been planned, started, ended or failed
      enum:
        - planned
        - started
        - ended
        - failed
    ExperimentTimeframe:
      type: object
      description: Object to define the timeframe for an experiment
      required:
        - startTimestamp
        - endTimestamp
      properties:
        startTimestamp:
          type: string
          format: date-time
          description: Start time of the experiment.
          x-oapi-codegen-extra-tags:
            binding: required
        endTimestamp:
          type: string
          format: date-time
          description: End time of the experiment.
          x-oapi-codegen-extra-tags:
            binding: required
    SimpleExperiment:
      type: object
      description: Object that contains properties which are used by any other experiment object
      required:
        - name
        - image
        - amount
        - timeframe
      properties:
        name:
          type: string
          x-oapi-codegen-extra-tags:
            binding: required
        image:
          type: string
          x-oapi-codegen-extra-tags:
            binding: required
        amount:
          type: integer
          x-oapi-codegen-extra-tags:
            binding: required
        timeframe:
          $ref: '#/components/schemas/ExperimentTimeframe'
    EditExperiment:
      type: object
      description: Object to use when editing an existing Experiment
      allOf:
        - $ref: '#/components/schemas/SimpleExperiment'
    NewExperiment:
      type: object
      description: The object to use when creating a new Experiment
      allOf:
        - $ref: '#/components/schemas/SimpleExperiment'
    Experiment:
      type: object
      description: The object to return when creating or editing an experiment
      allOf:
        - $ref: '#/components/schemas/SimpleExperiment'
        - type: object
          required:
            - id
            - status
            - team
          properties:
            id:
              $ref: '#/components/schemas/ExperimentID'
            status:
              $ref: '#/components/schemas/ExperimentStatus'
            team:
               $ref: '#/components/schemas/Team'
            permissions:
                $ref: '#/components/schemas/UserObjectPermissions'
    AllExperimentsResponse:
      type: object
      properties:
        experiments:
          type: array
          items:
            $ref: '#/components/schemas/Experiment'
        count:
          type: integer
        permissions:
          $ref: '#/components/schemas/UserObjectPermissions'
      required:
      - experiments
      - count
  responses:
    BadRequestError:
      description: The supplied input is invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: Object with the given ID not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidInputError:
      description: Malformed request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
